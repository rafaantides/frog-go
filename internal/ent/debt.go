// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"frog-go/internal/ent/category"
	"frog-go/internal/ent/debt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Debt is the model entity for the Debt schema.
type Debt struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// PurchaseDate holds the value of the "purchase_date" field.
	PurchaseDate time.Time `json:"purchase_date,omitempty"`
	// DueDate holds the value of the "due_date" field.
	DueDate *time.Time `json:"due_date,omitempty"`
	// CategoryID holds the value of the "category_id" field.
	CategoryID uuid.UUID `json:"category_id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DebtQuery when eager-loading is set.
	Edges        DebtEdges `json:"edges"`
	category_id  *uuid.UUID
	selectValues sql.SelectValues
}

// DebtEdges holds the relations/edges for other nodes in the graph.
type DebtEdges struct {
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DebtEdges) CategoryOrErr() (*Category, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Debt) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case debt.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case debt.FieldTitle, debt.FieldStatus:
			values[i] = new(sql.NullString)
		case debt.FieldCreatedAt, debt.FieldUpdatedAt, debt.FieldPurchaseDate, debt.FieldDueDate:
			values[i] = new(sql.NullTime)
		case debt.FieldID, debt.FieldCategoryID:
			values[i] = new(uuid.UUID)
		case debt.ForeignKeys[0]: // category_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Debt fields.
func (d *Debt) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case debt.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case debt.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case debt.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case debt.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				d.Amount = value.Float64
			}
		case debt.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				d.Title = value.String
			}
		case debt.FieldPurchaseDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field purchase_date", values[i])
			} else if value.Valid {
				d.PurchaseDate = value.Time
			}
		case debt.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				d.DueDate = new(time.Time)
				*d.DueDate = value.Time
			}
		case debt.FieldCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value != nil {
				d.CategoryID = *value
			}
		case debt.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = value.String
			}
		case debt.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				d.category_id = new(uuid.UUID)
				*d.category_id = *value.S.(*uuid.UUID)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Debt.
// This includes values selected through modifiers, order, etc.
func (d *Debt) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryCategory queries the "category" edge of the Debt entity.
func (d *Debt) QueryCategory() *CategoryQuery {
	return NewDebtClient(d.config).QueryCategory(d)
}

// Update returns a builder for updating this Debt.
// Note that you need to call Debt.Unwrap() before calling this method if this Debt
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Debt) Update() *DebtUpdateOne {
	return NewDebtClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Debt entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Debt) Unwrap() *Debt {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Debt is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Debt) String() string {
	var builder strings.Builder
	builder.WriteString("Debt(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", d.Amount))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(d.Title)
	builder.WriteString(", ")
	builder.WriteString("purchase_date=")
	builder.WriteString(d.PurchaseDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := d.DueDate; v != nil {
		builder.WriteString("due_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(fmt.Sprintf("%v", d.CategoryID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(d.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Debts is a parsable slice of Debt.
type Debts []*Debt
