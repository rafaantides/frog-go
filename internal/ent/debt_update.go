// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"frog-go/internal/ent/category"
	"frog-go/internal/ent/debt"
	"frog-go/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DebtUpdate is the builder for updating Debt entities.
type DebtUpdate struct {
	config
	hooks    []Hook
	mutation *DebtMutation
}

// Where appends a list predicates to the DebtUpdate builder.
func (du *DebtUpdate) Where(ps ...predicate.Debt) *DebtUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DebtUpdate) SetUpdatedAt(t time.Time) *DebtUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetAmount sets the "amount" field.
func (du *DebtUpdate) SetAmount(f float64) *DebtUpdate {
	du.mutation.ResetAmount()
	du.mutation.SetAmount(f)
	return du
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (du *DebtUpdate) SetNillableAmount(f *float64) *DebtUpdate {
	if f != nil {
		du.SetAmount(*f)
	}
	return du
}

// AddAmount adds f to the "amount" field.
func (du *DebtUpdate) AddAmount(f float64) *DebtUpdate {
	du.mutation.AddAmount(f)
	return du
}

// SetTitle sets the "title" field.
func (du *DebtUpdate) SetTitle(s string) *DebtUpdate {
	du.mutation.SetTitle(s)
	return du
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (du *DebtUpdate) SetNillableTitle(s *string) *DebtUpdate {
	if s != nil {
		du.SetTitle(*s)
	}
	return du
}

// SetPurchaseDate sets the "purchase_date" field.
func (du *DebtUpdate) SetPurchaseDate(t time.Time) *DebtUpdate {
	du.mutation.SetPurchaseDate(t)
	return du
}

// SetNillablePurchaseDate sets the "purchase_date" field if the given value is not nil.
func (du *DebtUpdate) SetNillablePurchaseDate(t *time.Time) *DebtUpdate {
	if t != nil {
		du.SetPurchaseDate(*t)
	}
	return du
}

// SetDueDate sets the "due_date" field.
func (du *DebtUpdate) SetDueDate(t time.Time) *DebtUpdate {
	du.mutation.SetDueDate(t)
	return du
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (du *DebtUpdate) SetNillableDueDate(t *time.Time) *DebtUpdate {
	if t != nil {
		du.SetDueDate(*t)
	}
	return du
}

// ClearDueDate clears the value of the "due_date" field.
func (du *DebtUpdate) ClearDueDate() *DebtUpdate {
	du.mutation.ClearDueDate()
	return du
}

// SetCategoryID sets the "category_id" field.
func (du *DebtUpdate) SetCategoryID(u uuid.UUID) *DebtUpdate {
	du.mutation.SetCategoryID(u)
	return du
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (du *DebtUpdate) SetNillableCategoryID(u *uuid.UUID) *DebtUpdate {
	if u != nil {
		du.SetCategoryID(*u)
	}
	return du
}

// SetStatus sets the "status" field.
func (du *DebtUpdate) SetStatus(s string) *DebtUpdate {
	du.mutation.SetStatus(s)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DebtUpdate) SetNillableStatus(s *string) *DebtUpdate {
	if s != nil {
		du.SetStatus(*s)
	}
	return du
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (du *DebtUpdate) SetCategoryID(id uuid.UUID) *DebtUpdate {
	du.mutation.SetCategoryID(id)
	return du
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (du *DebtUpdate) SetNillableCategoryID(id *uuid.UUID) *DebtUpdate {
	if id != nil {
		du = du.SetCategoryID(*id)
	}
	return du
}

// SetCategory sets the "category" edge to the Category entity.
func (du *DebtUpdate) SetCategory(c *Category) *DebtUpdate {
	return du.SetCategoryID(c.ID)
}

// Mutation returns the DebtMutation object of the builder.
func (du *DebtUpdate) Mutation() *DebtMutation {
	return du.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (du *DebtUpdate) ClearCategory() *DebtUpdate {
	du.mutation.ClearCategory()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DebtUpdate) Save(ctx context.Context) (int, error) {
	du.defaults()
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DebtUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DebtUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DebtUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DebtUpdate) defaults() {
	if _, ok := du.mutation.UpdatedAt(); !ok {
		v := debt.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DebtUpdate) check() error {
	if v, ok := du.mutation.Title(); ok {
		if err := debt.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Debt.title": %w`, err)}
		}
	}
	if v, ok := du.mutation.Status(); ok {
		if err := debt.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Debt.status": %w`, err)}
		}
	}
	return nil
}

func (du *DebtUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(debt.Table, debt.Columns, sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(debt.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.Amount(); ok {
		_spec.SetField(debt.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedAmount(); ok {
		_spec.AddField(debt.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.Title(); ok {
		_spec.SetField(debt.FieldTitle, field.TypeString, value)
	}
	if value, ok := du.mutation.PurchaseDate(); ok {
		_spec.SetField(debt.FieldPurchaseDate, field.TypeTime, value)
	}
	if value, ok := du.mutation.DueDate(); ok {
		_spec.SetField(debt.FieldDueDate, field.TypeTime, value)
	}
	if du.mutation.DueDateCleared() {
		_spec.ClearField(debt.FieldDueDate, field.TypeTime)
	}
	if value, ok := du.mutation.CategoryID(); ok {
		_spec.SetField(debt.FieldCategoryID, field.TypeUUID, value)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(debt.FieldStatus, field.TypeString, value)
	}
	if du.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.CategoryTable,
			Columns: []string{debt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.CategoryTable,
			Columns: []string{debt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DebtUpdateOne is the builder for updating a single Debt entity.
type DebtUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DebtMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DebtUpdateOne) SetUpdatedAt(t time.Time) *DebtUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetAmount sets the "amount" field.
func (duo *DebtUpdateOne) SetAmount(f float64) *DebtUpdateOne {
	duo.mutation.ResetAmount()
	duo.mutation.SetAmount(f)
	return duo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableAmount(f *float64) *DebtUpdateOne {
	if f != nil {
		duo.SetAmount(*f)
	}
	return duo
}

// AddAmount adds f to the "amount" field.
func (duo *DebtUpdateOne) AddAmount(f float64) *DebtUpdateOne {
	duo.mutation.AddAmount(f)
	return duo
}

// SetTitle sets the "title" field.
func (duo *DebtUpdateOne) SetTitle(s string) *DebtUpdateOne {
	duo.mutation.SetTitle(s)
	return duo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableTitle(s *string) *DebtUpdateOne {
	if s != nil {
		duo.SetTitle(*s)
	}
	return duo
}

// SetPurchaseDate sets the "purchase_date" field.
func (duo *DebtUpdateOne) SetPurchaseDate(t time.Time) *DebtUpdateOne {
	duo.mutation.SetPurchaseDate(t)
	return duo
}

// SetNillablePurchaseDate sets the "purchase_date" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillablePurchaseDate(t *time.Time) *DebtUpdateOne {
	if t != nil {
		duo.SetPurchaseDate(*t)
	}
	return duo
}

// SetDueDate sets the "due_date" field.
func (duo *DebtUpdateOne) SetDueDate(t time.Time) *DebtUpdateOne {
	duo.mutation.SetDueDate(t)
	return duo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableDueDate(t *time.Time) *DebtUpdateOne {
	if t != nil {
		duo.SetDueDate(*t)
	}
	return duo
}

// ClearDueDate clears the value of the "due_date" field.
func (duo *DebtUpdateOne) ClearDueDate() *DebtUpdateOne {
	duo.mutation.ClearDueDate()
	return duo
}

// SetCategoryID sets the "category_id" field.
func (duo *DebtUpdateOne) SetCategoryID(u uuid.UUID) *DebtUpdateOne {
	duo.mutation.SetCategoryID(u)
	return duo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableCategoryID(u *uuid.UUID) *DebtUpdateOne {
	if u != nil {
		duo.SetCategoryID(*u)
	}
	return duo
}

// SetStatus sets the "status" field.
func (duo *DebtUpdateOne) SetStatus(s string) *DebtUpdateOne {
	duo.mutation.SetStatus(s)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableStatus(s *string) *DebtUpdateOne {
	if s != nil {
		duo.SetStatus(*s)
	}
	return duo
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (duo *DebtUpdateOne) SetCategoryID(id uuid.UUID) *DebtUpdateOne {
	duo.mutation.SetCategoryID(id)
	return duo
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (duo *DebtUpdateOne) SetNillableCategoryID(id *uuid.UUID) *DebtUpdateOne {
	if id != nil {
		duo = duo.SetCategoryID(*id)
	}
	return duo
}

// SetCategory sets the "category" edge to the Category entity.
func (duo *DebtUpdateOne) SetCategory(c *Category) *DebtUpdateOne {
	return duo.SetCategoryID(c.ID)
}

// Mutation returns the DebtMutation object of the builder.
func (duo *DebtUpdateOne) Mutation() *DebtMutation {
	return duo.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (duo *DebtUpdateOne) ClearCategory() *DebtUpdateOne {
	duo.mutation.ClearCategory()
	return duo
}

// Where appends a list predicates to the DebtUpdate builder.
func (duo *DebtUpdateOne) Where(ps ...predicate.Debt) *DebtUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DebtUpdateOne) Select(field string, fields ...string) *DebtUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Debt entity.
func (duo *DebtUpdateOne) Save(ctx context.Context) (*Debt, error) {
	duo.defaults()
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DebtUpdateOne) SaveX(ctx context.Context) *Debt {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DebtUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DebtUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DebtUpdateOne) defaults() {
	if _, ok := duo.mutation.UpdatedAt(); !ok {
		v := debt.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DebtUpdateOne) check() error {
	if v, ok := duo.mutation.Title(); ok {
		if err := debt.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Debt.title": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Status(); ok {
		if err := debt.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Debt.status": %w`, err)}
		}
	}
	return nil
}

func (duo *DebtUpdateOne) sqlSave(ctx context.Context) (_node *Debt, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(debt.Table, debt.Columns, sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Debt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, debt.FieldID)
		for _, f := range fields {
			if !debt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != debt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(debt.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.Amount(); ok {
		_spec.SetField(debt.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedAmount(); ok {
		_spec.AddField(debt.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.Title(); ok {
		_spec.SetField(debt.FieldTitle, field.TypeString, value)
	}
	if value, ok := duo.mutation.PurchaseDate(); ok {
		_spec.SetField(debt.FieldPurchaseDate, field.TypeTime, value)
	}
	if value, ok := duo.mutation.DueDate(); ok {
		_spec.SetField(debt.FieldDueDate, field.TypeTime, value)
	}
	if duo.mutation.DueDateCleared() {
		_spec.ClearField(debt.FieldDueDate, field.TypeTime)
	}
	if value, ok := duo.mutation.CategoryID(); ok {
		_spec.SetField(debt.FieldCategoryID, field.TypeUUID, value)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(debt.FieldStatus, field.TypeString, value)
	}
	if duo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.CategoryTable,
			Columns: []string{debt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.CategoryTable,
			Columns: []string{debt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Debt{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{debt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
