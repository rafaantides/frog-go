// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "kind", Type: field.TypeString, Default: "expense"},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "color", Type: field.TypeString, Nullable: true, Size: 7},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "category_kind",
				Unique:  false,
				Columns: []*schema.Column{CategoriesColumns[3]},
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "kind", Type: field.TypeString, Default: "expense"},
		{Name: "amount", Type: field.TypeFloat64, SchemaType: map[string]string{"postgres": "decimal(10,2)"}},
		{Name: "title", Type: field.TypeString, Size: 255},
		{Name: "purchase_date", Type: field.TypeTime},
		{Name: "due_date", Type: field.TypeTime, Nullable: true},
		{Name: "status", Type: field.TypeString, Default: "pending"},
		{Name: "category_id", Type: field.TypeUUID, Nullable: true},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "transactions_categories_category",
				Columns:    []*schema.Column{TransactionsColumns[9]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "transaction_purchase_date",
				Unique:  false,
				Columns: []*schema.Column{TransactionsColumns[6]},
			},
			{
				Name:    "transaction_due_date",
				Unique:  false,
				Columns: []*schema.Column{TransactionsColumns[7]},
			},
			{
				Name:    "transaction_kind",
				Unique:  false,
				Columns: []*schema.Column{TransactionsColumns[3]},
			},
			{
				Name:    "transaction_category_id",
				Unique:  false,
				Columns: []*schema.Column{TransactionsColumns[9]},
			},
			{
				Name:    "transaction_due_date_kind_category_id",
				Unique:  false,
				Columns: []*schema.Column{TransactionsColumns[7], TransactionsColumns[3], TransactionsColumns[9]},
			},
			{
				Name:    "transaction_purchase_date_kind_category_id",
				Unique:  false,
				Columns: []*schema.Column{TransactionsColumns[6], TransactionsColumns[3], TransactionsColumns[9]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CategoriesTable,
		TransactionsTable,
	}
)

func init() {
	TransactionsTable.ForeignKeys[0].RefTable = CategoriesTable
}
