// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"frog-go/internal/ent/invoice"
	"frog-go/internal/ent/predicate"
	"frog-go/internal/ent/transaction"
	"frog-go/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// InvoiceUpdate is the builder for updating Invoice entities.
type InvoiceUpdate struct {
	config
	hooks    []Hook
	mutation *InvoiceMutation
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (_u *InvoiceUpdate) Where(ps ...predicate.Invoice) *InvoiceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InvoiceUpdate) SetUpdatedAt(v time.Time) *InvoiceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *InvoiceUpdate) SetStatus(v string) *InvoiceUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillableStatus(v *string) *InvoiceUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *InvoiceUpdate) SetAmount(v float64) *InvoiceUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillableAmount(v *float64) *InvoiceUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *InvoiceUpdate) AddAmount(v float64) *InvoiceUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *InvoiceUpdate) SetTitle(v string) *InvoiceUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillableTitle(v *string) *InvoiceUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *InvoiceUpdate) SetDueDate(v time.Time) *InvoiceUpdate {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *InvoiceUpdate) SetNillableDueDate(v *time.Time) *InvoiceUpdate {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (_u *InvoiceUpdate) AddTransactionIDs(ids ...uuid.UUID) *InvoiceUpdate {
	_u.mutation.AddTransactionIDs(ids...)
	return _u
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (_u *InvoiceUpdate) AddTransactions(v ...*Transaction) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTransactionIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *InvoiceUpdate) SetUserID(id uuid.UUID) *InvoiceUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *InvoiceUpdate) SetUser(v *User) *InvoiceUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (_u *InvoiceUpdate) Mutation() *InvoiceMutation {
	return _u.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (_u *InvoiceUpdate) ClearTransactions() *InvoiceUpdate {
	_u.mutation.ClearTransactions()
	return _u
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (_u *InvoiceUpdate) RemoveTransactionIDs(ids ...uuid.UUID) *InvoiceUpdate {
	_u.mutation.RemoveTransactionIDs(ids...)
	return _u
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (_u *InvoiceUpdate) RemoveTransactions(v ...*Transaction) *InvoiceUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTransactionIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (_u *InvoiceUpdate) ClearUser() *InvoiceUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *InvoiceUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InvoiceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *InvoiceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InvoiceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *InvoiceUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := invoice.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InvoiceUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := invoice.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Invoice.title": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.user"`)
	}
	return nil
}

func (_u *InvoiceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(invoice.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(invoice.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(invoice.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.TransactionsTable,
			Columns: []string{invoice.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !_u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.TransactionsTable,
			Columns: []string{invoice.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.TransactionsTable,
			Columns: []string{invoice.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.UserTable,
			Columns: []string{invoice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.UserTable,
			Columns: []string{invoice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// InvoiceUpdateOne is the builder for updating a single Invoice entity.
type InvoiceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvoiceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InvoiceUpdateOne) SetUpdatedAt(v time.Time) *InvoiceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *InvoiceUpdateOne) SetStatus(v string) *InvoiceUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillableStatus(v *string) *InvoiceUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *InvoiceUpdateOne) SetAmount(v float64) *InvoiceUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillableAmount(v *float64) *InvoiceUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *InvoiceUpdateOne) AddAmount(v float64) *InvoiceUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetTitle sets the "title" field.
func (_u *InvoiceUpdateOne) SetTitle(v string) *InvoiceUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillableTitle(v *string) *InvoiceUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *InvoiceUpdateOne) SetDueDate(v time.Time) *InvoiceUpdateOne {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *InvoiceUpdateOne) SetNillableDueDate(v *time.Time) *InvoiceUpdateOne {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (_u *InvoiceUpdateOne) AddTransactionIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	_u.mutation.AddTransactionIDs(ids...)
	return _u
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (_u *InvoiceUpdateOne) AddTransactions(v ...*Transaction) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTransactionIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *InvoiceUpdateOne) SetUserID(id uuid.UUID) *InvoiceUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *InvoiceUpdateOne) SetUser(v *User) *InvoiceUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the InvoiceMutation object of the builder.
func (_u *InvoiceUpdateOne) Mutation() *InvoiceMutation {
	return _u.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (_u *InvoiceUpdateOne) ClearTransactions() *InvoiceUpdateOne {
	_u.mutation.ClearTransactions()
	return _u
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (_u *InvoiceUpdateOne) RemoveTransactionIDs(ids ...uuid.UUID) *InvoiceUpdateOne {
	_u.mutation.RemoveTransactionIDs(ids...)
	return _u
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (_u *InvoiceUpdateOne) RemoveTransactions(v ...*Transaction) *InvoiceUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTransactionIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (_u *InvoiceUpdateOne) ClearUser() *InvoiceUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the InvoiceUpdate builder.
func (_u *InvoiceUpdateOne) Where(ps ...predicate.Invoice) *InvoiceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *InvoiceUpdateOne) Select(field string, fields ...string) *InvoiceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Invoice entity.
func (_u *InvoiceUpdateOne) Save(ctx context.Context) (*Invoice, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InvoiceUpdateOne) SaveX(ctx context.Context) *Invoice {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *InvoiceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InvoiceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *InvoiceUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := invoice.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InvoiceUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := invoice.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Invoice.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := invoice.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Invoice.title": %w`, err)}
		}
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Invoice.user"`)
	}
	return nil
}

func (_u *InvoiceUpdateOne) sqlSave(ctx context.Context) (_node *Invoice, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(invoice.Table, invoice.Columns, sqlgraph.NewFieldSpec(invoice.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Invoice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, invoice.FieldID)
		for _, f := range fields {
			if !invoice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != invoice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(invoice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(invoice.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(invoice.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(invoice.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(invoice.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(invoice.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.TransactionsTable,
			Columns: []string{invoice.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !_u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.TransactionsTable,
			Columns: []string{invoice.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   invoice.TransactionsTable,
			Columns: []string{invoice.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.UserTable,
			Columns: []string{invoice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   invoice.UserTable,
			Columns: []string{invoice.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Invoice{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{invoice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
