// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"frog-go/internal/ent/category"
	"frog-go/internal/ent/debt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DebtCreate is the builder for creating a Debt entity.
type DebtCreate struct {
	config
	mutation *DebtMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dc *DebtCreate) SetCreatedAt(t time.Time) *DebtCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DebtCreate) SetNillableCreatedAt(t *time.Time) *DebtCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DebtCreate) SetUpdatedAt(t time.Time) *DebtCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DebtCreate) SetNillableUpdatedAt(t *time.Time) *DebtCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetAmount sets the "amount" field.
func (dc *DebtCreate) SetAmount(f float64) *DebtCreate {
	dc.mutation.SetAmount(f)
	return dc
}

// SetTitle sets the "title" field.
func (dc *DebtCreate) SetTitle(s string) *DebtCreate {
	dc.mutation.SetTitle(s)
	return dc
}

// SetPurchaseDate sets the "purchase_date" field.
func (dc *DebtCreate) SetPurchaseDate(t time.Time) *DebtCreate {
	dc.mutation.SetPurchaseDate(t)
	return dc
}

// SetDueDate sets the "due_date" field.
func (dc *DebtCreate) SetDueDate(t time.Time) *DebtCreate {
	dc.mutation.SetDueDate(t)
	return dc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (dc *DebtCreate) SetNillableDueDate(t *time.Time) *DebtCreate {
	if t != nil {
		dc.SetDueDate(*t)
	}
	return dc
}

// SetStatus sets the "status" field.
func (dc *DebtCreate) SetStatus(s string) *DebtCreate {
	dc.mutation.SetStatus(s)
	return dc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dc *DebtCreate) SetNillableStatus(s *string) *DebtCreate {
	if s != nil {
		dc.SetStatus(*s)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DebtCreate) SetID(u uuid.UUID) *DebtCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DebtCreate) SetNillableID(u *uuid.UUID) *DebtCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (dc *DebtCreate) SetCategoryID(id uuid.UUID) *DebtCreate {
	dc.mutation.SetCategoryID(id)
	return dc
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (dc *DebtCreate) SetNillableCategoryID(id *uuid.UUID) *DebtCreate {
	if id != nil {
		dc = dc.SetCategoryID(*id)
	}
	return dc
}

// SetCategory sets the "category" edge to the Category entity.
func (dc *DebtCreate) SetCategory(c *Category) *DebtCreate {
	return dc.SetCategoryID(c.ID)
}

// Mutation returns the DebtMutation object of the builder.
func (dc *DebtCreate) Mutation() *DebtMutation {
	return dc.mutation
}

// Save creates the Debt in the database.
func (dc *DebtCreate) Save(ctx context.Context) (*Debt, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DebtCreate) SaveX(ctx context.Context) *Debt {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DebtCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DebtCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DebtCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := debt.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := debt.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Status(); !ok {
		v := debt.DefaultStatus
		dc.mutation.SetStatus(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := debt.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DebtCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Debt.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Debt.updated_at"`)}
	}
	if _, ok := dc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Debt.amount"`)}
	}
	if _, ok := dc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Debt.title"`)}
	}
	if v, ok := dc.mutation.Title(); ok {
		if err := debt.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Debt.title": %w`, err)}
		}
	}
	if _, ok := dc.mutation.PurchaseDate(); !ok {
		return &ValidationError{Name: "purchase_date", err: errors.New(`ent: missing required field "Debt.purchase_date"`)}
	}
	if _, ok := dc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Debt.status"`)}
	}
	if v, ok := dc.mutation.Status(); ok {
		if err := debt.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Debt.status": %w`, err)}
		}
	}
	return nil
}

func (dc *DebtCreate) sqlSave(ctx context.Context) (*Debt, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DebtCreate) createSpec() (*Debt, *sqlgraph.CreateSpec) {
	var (
		_node = &Debt{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(debt.Table, sqlgraph.NewFieldSpec(debt.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(debt.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(debt.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Amount(); ok {
		_spec.SetField(debt.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := dc.mutation.Title(); ok {
		_spec.SetField(debt.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := dc.mutation.PurchaseDate(); ok {
		_spec.SetField(debt.FieldPurchaseDate, field.TypeTime, value)
		_node.PurchaseDate = value
	}
	if value, ok := dc.mutation.DueDate(); ok {
		_spec.SetField(debt.FieldDueDate, field.TypeTime, value)
		_node.DueDate = &value
	}
	if value, ok := dc.mutation.Status(); ok {
		_spec.SetField(debt.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if nodes := dc.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   debt.CategoryTable,
			Columns: []string{debt.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.category_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DebtCreateBulk is the builder for creating many Debt entities in bulk.
type DebtCreateBulk struct {
	config
	err      error
	builders []*DebtCreate
}

// Save creates the Debt entities in the database.
func (dcb *DebtCreateBulk) Save(ctx context.Context) ([]*Debt, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Debt, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DebtMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DebtCreateBulk) SaveX(ctx context.Context) []*Debt {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DebtCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DebtCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
