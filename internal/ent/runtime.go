// Code generated by ent, DO NOT EDIT.

package ent

import (
	"frog-go/internal/ent/category"
	"frog-go/internal/ent/invoice"
	"frog-go/internal/ent/schemas"
	"frog-go/internal/ent/transaction"
	"frog-go/internal/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	categoryMixin := schemas.Category{}.Mixin()
	categoryMixinFields0 := categoryMixin[0].Fields()
	_ = categoryMixinFields0
	categoryMixinFields1 := categoryMixin[1].Fields()
	_ = categoryMixinFields1
	categoryFields := schemas.Category{}.Fields()
	_ = categoryFields
	// categoryDescCreatedAt is the schema descriptor for created_at field.
	categoryDescCreatedAt := categoryMixinFields1[0].Descriptor()
	// category.DefaultCreatedAt holds the default value on creation for the created_at field.
	category.DefaultCreatedAt = categoryDescCreatedAt.Default.(func() time.Time)
	// categoryDescUpdatedAt is the schema descriptor for updated_at field.
	categoryDescUpdatedAt := categoryMixinFields1[1].Descriptor()
	// category.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	category.DefaultUpdatedAt = categoryDescUpdatedAt.Default.(func() time.Time)
	// category.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	category.UpdateDefaultUpdatedAt = categoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// categoryDescName is the schema descriptor for name field.
	categoryDescName := categoryFields[0].Descriptor()
	// category.NameValidator is a validator for the "name" field. It is called by the builders before save.
	category.NameValidator = func() func(string) error {
		validators := categoryDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// categoryDescColor is the schema descriptor for color field.
	categoryDescColor := categoryFields[2].Descriptor()
	// category.ColorValidator is a validator for the "color" field. It is called by the builders before save.
	category.ColorValidator = categoryDescColor.Validators[0].(func(string) error)
	// categoryDescID is the schema descriptor for id field.
	categoryDescID := categoryMixinFields0[0].Descriptor()
	// category.DefaultID holds the default value on creation for the id field.
	category.DefaultID = categoryDescID.Default.(func() uuid.UUID)
	invoiceMixin := schemas.Invoice{}.Mixin()
	invoiceMixinFields0 := invoiceMixin[0].Fields()
	_ = invoiceMixinFields0
	invoiceMixinFields1 := invoiceMixin[1].Fields()
	_ = invoiceMixinFields1
	invoiceMixinFields2 := invoiceMixin[2].Fields()
	_ = invoiceMixinFields2
	invoiceMixinFields3 := invoiceMixin[3].Fields()
	_ = invoiceMixinFields3
	invoiceFields := schemas.Invoice{}.Fields()
	_ = invoiceFields
	// invoiceDescCreatedAt is the schema descriptor for created_at field.
	invoiceDescCreatedAt := invoiceMixinFields1[0].Descriptor()
	// invoice.DefaultCreatedAt holds the default value on creation for the created_at field.
	invoice.DefaultCreatedAt = invoiceDescCreatedAt.Default.(func() time.Time)
	// invoiceDescUpdatedAt is the schema descriptor for updated_at field.
	invoiceDescUpdatedAt := invoiceMixinFields1[1].Descriptor()
	// invoice.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	invoice.DefaultUpdatedAt = invoiceDescUpdatedAt.Default.(func() time.Time)
	// invoice.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	invoice.UpdateDefaultUpdatedAt = invoiceDescUpdatedAt.UpdateDefault.(func() time.Time)
	// invoiceDescStatus is the schema descriptor for status field.
	invoiceDescStatus := invoiceMixinFields2[0].Descriptor()
	// invoice.DefaultStatus holds the default value on creation for the status field.
	invoice.DefaultStatus = invoiceDescStatus.Default.(string)
	// invoice.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	invoice.StatusValidator = func() func(string) error {
		validators := invoiceDescStatus.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(status string) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// invoiceDescAmount is the schema descriptor for amount field.
	invoiceDescAmount := invoiceMixinFields3[0].Descriptor()
	// invoice.DefaultAmount holds the default value on creation for the amount field.
	invoice.DefaultAmount = invoiceDescAmount.Default.(float64)
	// invoiceDescTitle is the schema descriptor for title field.
	invoiceDescTitle := invoiceFields[0].Descriptor()
	// invoice.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	invoice.TitleValidator = func() func(string) error {
		validators := invoiceDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// invoiceDescID is the schema descriptor for id field.
	invoiceDescID := invoiceMixinFields0[0].Descriptor()
	// invoice.DefaultID holds the default value on creation for the id field.
	invoice.DefaultID = invoiceDescID.Default.(func() uuid.UUID)
	transactionMixin := schemas.Transaction{}.Mixin()
	transactionMixinFields0 := transactionMixin[0].Fields()
	_ = transactionMixinFields0
	transactionMixinFields1 := transactionMixin[1].Fields()
	_ = transactionMixinFields1
	transactionMixinFields2 := transactionMixin[2].Fields()
	_ = transactionMixinFields2
	transactionMixinFields3 := transactionMixin[3].Fields()
	_ = transactionMixinFields3
	transactionFields := schemas.Transaction{}.Fields()
	_ = transactionFields
	// transactionDescCreatedAt is the schema descriptor for created_at field.
	transactionDescCreatedAt := transactionMixinFields1[0].Descriptor()
	// transaction.DefaultCreatedAt holds the default value on creation for the created_at field.
	transaction.DefaultCreatedAt = transactionDescCreatedAt.Default.(func() time.Time)
	// transactionDescUpdatedAt is the schema descriptor for updated_at field.
	transactionDescUpdatedAt := transactionMixinFields1[1].Descriptor()
	// transaction.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	transaction.DefaultUpdatedAt = transactionDescUpdatedAt.Default.(func() time.Time)
	// transaction.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	transaction.UpdateDefaultUpdatedAt = transactionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// transactionDescRecordType is the schema descriptor for record_type field.
	transactionDescRecordType := transactionMixinFields2[0].Descriptor()
	// transaction.DefaultRecordType holds the default value on creation for the record_type field.
	transaction.DefaultRecordType = transactionDescRecordType.Default.(string)
	// transaction.RecordTypeValidator is a validator for the "record_type" field. It is called by the builders before save.
	transaction.RecordTypeValidator = func() func(string) error {
		validators := transactionDescRecordType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(record_type string) error {
			for _, fn := range fns {
				if err := fn(record_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// transactionDescStatus is the schema descriptor for status field.
	transactionDescStatus := transactionMixinFields3[0].Descriptor()
	// transaction.DefaultStatus holds the default value on creation for the status field.
	transaction.DefaultStatus = transactionDescStatus.Default.(string)
	// transaction.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	transaction.StatusValidator = func() func(string) error {
		validators := transactionDescStatus.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(status string) error {
			for _, fn := range fns {
				if err := fn(status); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// transactionDescTitle is the schema descriptor for title field.
	transactionDescTitle := transactionFields[0].Descriptor()
	// transaction.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	transaction.TitleValidator = func() func(string) error {
		validators := transactionDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// transactionDescID is the schema descriptor for id field.
	transactionDescID := transactionMixinFields0[0].Descriptor()
	// transaction.DefaultID holds the default value on creation for the id field.
	transaction.DefaultID = transactionDescID.Default.(func() uuid.UUID)
	userMixin := schemas.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schemas.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields1[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields1[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = func() func(string) error {
		validators := userDescUsername.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(username string) error {
			for _, fn := range fns {
				if err := fn(username); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPasswordHash is the schema descriptor for password_hash field.
	userDescPasswordHash := userFields[3].Descriptor()
	// user.PasswordHashValidator is a validator for the "password_hash" field. It is called by the builders before save.
	user.PasswordHashValidator = func() func(string) error {
		validators := userDescPasswordHash.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(password_hash string) error {
			for _, fn := range fns {
				if err := fn(password_hash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescIsActive is the schema descriptor for is_active field.
	userDescIsActive := userFields[4].Descriptor()
	// user.DefaultIsActive holds the default value on creation for the is_active field.
	user.DefaultIsActive = userDescIsActive.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields0[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
